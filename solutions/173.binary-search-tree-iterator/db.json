{"javascript":"/**\n * Definition for binary tree\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * @constructor\n * @param {TreeNode} root - root of the binary search tree\n */\nvar BSTIterator = function(root) {\n    this.iterator = generator(root)\n    this.curr = this.iterator.next()\n\n    function* generator(root) {\n        if (root) {\n            yield * generator(root.left)\n            yield root.val\n            yield * generator(root.right)\n        }\n    }\n};\n\n\n/**\n * @this BSTIterator\n * @returns {boolean} - whether we have a next smallest number\n */\nBSTIterator.prototype.hasNext = function() {\n    return !this.curr.done\n};\n/**\n * @this BSTIterator\n * @returns {number} - the next smallest number\n */\nBSTIterator.prototype.next = function() {\n    try {\n        return this.curr.value\n    } finally {\n        this.curr = this.iterator.next()\n    }\n};\n\n/**\n * Your BSTIterator will be called like this:\n * var i = new BSTIterator(root), a = [];\n * while (i.hasNext()) a.push(i.next());\n */"}